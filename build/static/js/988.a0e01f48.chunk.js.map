{"version":3,"file":"static/js/988.a0e01f48.chunk.js","mappings":"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","sources":["webpack://web-booking/./src/pages/Messenger/components/Right/right.module.css?8d0d","pages/Messenger/components/Right/index.tsx","webpack://web-booking/./src/pages/Messenger/message.module.css?0be0","pages/Messenger/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"right_container__l7Q3-\",\"head\":\"right_head__MJzmn\",\"head_left\":\"right_head_left__YkzKl\",\"head_left_back\":\"right_head_left_back__SDwlz\",\"topic\":\"right_topic__K-z5s\",\"topic_img\":\"right_topic_img__ErJSp\",\"topic_name\":\"right_topic_name__Yo7XS\",\"body\":\"right_body__UJaOK\",\"messages\":\"right_messages__jYm1D\",\"message\":\"right_message__qzFz2\",\"message_head\":\"right_message_head__L2UXJ\",\"avatar\":\"right_avatar__R29Y4\",\"user_name\":\"right_user_name__N2-MM\",\"create\":\"right_create__HwPOF\",\"message_body\":\"right_message_body__bDXtq\",\"message_body_cnt\":\"right_message_body_cnt__B3q6D\",\"input_cnt\":\"right_input_cnt__IQ2+S\",\"scroll_btn\":\"right_scroll_btn__DSaqR\",\"scroll_btn_act\":\"right_scroll_btn_act__pT1Zn\",\"ip_ctl\":\"right_ip_ctl__pquHN\",\"ip_ctl_btn\":\"right_ip_ctl_btn__pyHwN\",\"btn_send\":\"right_btn_send__YOsmR\",\"text_area_cnt\":\"right_text_area_cnt__xyIxa\",\"text_area\":\"right_text_area__rs1W6\",\"load\":\"right_load__Xt-Ri\",\"chatBubble\":\"right_chatBubble__iSX6l\",\"typing\":\"right_typing__a6Sfb\",\"dot\":\"right_dot__+KkvV\",\"mercuryTypingAnimation\":\"right_mercuryTypingAnimation__pQNPk\"};","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useLocation, useHistory } from \"react-router-dom\"\nimport { IMessage, ITopic } from \"interface\"\nimport style from \"./right.module.css\"\nimport { XButton } from \"components/Layout\"\nimport icon from \"constants/icon\"\nimport { formatDateFromNow, linkify, onErrorAvatar, unique, uniqueArr } from \"utils\"\nimport { useAuth, useElementOnScreen, useSwr, useSwrInfinite } from \"hooks\"\nimport InfiniteScroll from \"react-infinite-scroll-component\"\nimport { Dispatch, SetStateAction, useContext, useEffect, useRef, useState, KeyboardEvent } from \"react\"\nimport { AppContext, AppContextType } from \"context\"\nimport API_ROUTE from \"api/_api\"\nimport { CACHE_TIME } from \"common\"\nimport moment from \"moment\"\nimport { chatApi } from \"api\"\nimport { CircularProgress } from \"@mui/material\"\n\n\nexport const Right = () => {\n  const { echo } = useContext(AppContext) as AppContextType\n  const { USER: user } = useAuth()\n  const location = useLocation()\n  const history = useHistory()\n  const topic_id = location.pathname.split(\"/\")[2]\n  const topic: ITopic | undefined = location.state\n  const botRef = useRef<HTMLDivElement>(null)\n  const onScrollBottom = () => {\n    if (botRef.current) {\n      botRef.current.scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n  const { response: org } = useSwr({\n    API_URL: API_ROUTE.ORG(topic?.organization_id ?? 0),\n    enable: topic?.organization_id,\n    dedupingInterval: CACHE_TIME\n  })\n  const users_name = unique(topic?.topic_user?.map(i => i.user?.fullname) ?? [])\n  let name = topic?.name\n  if (topic?.name?.trim().length === 0 || !topic?.name) {\n    name = users_name.join(\", \")\n  }\n  const { resData, onLoadMore, totalItem } = useSwrInfinite({\n    API_URL: \"messages\",\n    enable: user && topic_id,\n    keyPage: 'p',\n    params: {\n      l: 25,\n      sort: \"-created_at\",\n      topic_id\n    },\n    dedupingInterval: 0\n  })\n  const more = () => resData.length < totalItem && onLoadMore()\n  const isInScreen = useElementOnScreen({ rootMargin: '100px', threshold: 0.3 }, botRef)\n  const [msges, setMsges] = useState<IMessage[]>([])\n  const [isTyping, setIsTyping] = useState(false)\n  //[] handle messages\n  useEffect(() => {\n    if (echo && user && topic && org) {\n      let chat: any = echo.join(`ci.chat.${org.subdomain}.${topic_id}`)\n        .subscribed(() => {\n          chat.whisper('connected', {\n            user: {\n              id: user.id,\n              fullname: user.fullname,\n              avatar: user.avatar,\n              current_platform: 'MANAGER_WEB'\n            }, socketId: echo?.socketId()\n          })\n          chat.listenForWhisper('typing', (u: any) => {\n            setIsTyping(u?.user?.isTyping)\n         })\n        })\n        .listen('MessagePosted', (u: IMessage) => {\n          if (user.id !== u.user_id) {\n            onScrollBottom()\n            setMsges(prev => {\n              if (prev.indexOf(u) === -1) {\n                return [u, ...prev]\n              }\n              return prev\n            })\n          }\n        })\n    }\n    return () => {\n      setMsges([])\n    }\n  }, [echo, topic_id, org])\n\n  return (\n    <div className={style.container} >\n      <div className={style.head}>\n        <div className={style.head_left}>\n          <XButton\n            onClick={() => history.goBack()}\n            className={style.head_left_back}\n            icon={icon.chevronRightBlack}\n          />\n          <div className={style.topic}>\n            <div className={style.topic_img}>\n              <img src=\"\" alt=\"\" />\n            </div>\n            <div className={style.topic_name}>{name}</div>\n          </div>\n        </div>\n      </div>\n      <div\n        id=\"scrollableDiv\"\n        className={style.messages}\n      >\n        <div ref={botRef} className={style.bottom}></div>\n        <InfiniteScroll\n          dataLength={resData.length}\n          next={more}\n          style={{ display: 'flex', flexDirection: 'column-reverse' }}\n          inverse={true} //\n          hasMore={true}\n          loader={\n            resData.length < totalItem &&\n            <Loader />\n          }\n          scrollableTarget=\"scrollableDiv\"\n        >\n          {isTyping && <Typing />}\n          {uniqueArr(msges).concat(resData).map((item: IMessage, index) => (\n            <div key={index} className={style.message}>\n              <Message item={item} change={item.user_id === user.id} />\n            </div>\n          ))}\n        </InfiniteScroll>\n      </div>\n      <InputChat\n        setMsges={setMsges}\n        topic_id={topic_id}\n        onScrollBottom={onScrollBottom}\n        isInScreen={isInScreen}\n        org={org}\n      />\n    </div>\n  )\n}\nconst Message = ({ item, change = false }: { item: IMessage, change?: boolean }) => {\n  return (\n    <div className={style.message_cnt}>\n      <div className={style.message_head} style={change ? { flexDirection: \"row-reverse\" } : {}}>\n        {\n          !change &&\n          <>\n            <div className={style.avatar}>\n              <img src={item.user?.avatar || ''} onError={onErrorAvatar} alt=\"\" />\n            </div>\n            <span className={style.user_name}>{item.user?.fullname}</span>\n          </>\n        }\n        <span className={style.create}>\n          {formatDateFromNow(item.created_at)}\n        </span>\n      </div>\n      <div style={change ? { flexDirection: \"row-reverse\" } : {}} className={style.message_body}>\n        <div\n          style={change ? {\n            backgroundColor: \"#f1faff\",\n            borderRadius: \"8px 0px 8px 8px\"\n          } : {}}\n          className={style.message_body_cnt}\n          dangerouslySetInnerHTML={{ __html: linkify(item.msg) }}\n        />\n      </div>\n    </div>\n  )\n}\ninterface InputProps {\n  setMsges: Dispatch<SetStateAction<IMessage[]>>;\n  topic_id: string;\n  onScrollBottom: () => void;\n  isInScreen?: boolean;\n  org: any\n}\nconst initMsg = {\n  _id: \"\",\n  msg: '',\n  user_id: 0,\n  topic_id: ``,\n  reply_id: null,\n  updated_at: '',\n  created_at: '',\n}\nconst InputChat = ({ setMsges, topic_id, onScrollBottom, isInScreen, org }: InputProps) => {\n  const { USER: user } = useAuth()\n  const [msg, setMsg] = useState<IMessage>(initMsg)\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const { echo } = useContext(AppContext) as AppContextType\n  const onEmitTyping = (isTyping: boolean) => {\n    let chat: any = echo?.join(`ci.chat.${org.subdomain}.${topic_id}`)\n    chat?.whisper('typing', {\n      user: {\n        id: user.id,\n        fullname: user.fullname,\n        avatar: user.avatar,\n        isTyping: isTyping\n      }, socketId: echo?.socketId()\n    })\n  }\n  const resizeTextArea = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"auto\";\n      if (msg.msg.length > 0) {\n        textAreaRef.current.style.height =\n          textAreaRef.current.scrollHeight + \"px\";\n      }\n    }\n  };\n  useEffect(resizeTextArea, [msg]);\n  const onSubmit = async () => {\n    if (msg.msg.trim().length > 0) {\n      setMsges(prev => [{\n        ...msg,\n        _id: `${moment().format(\"YYYYMMDDHHmmss\")}${moment().milliseconds()}`,\n        user_id: user?.id,\n        created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n      }, ...prev])\n      setMsg(initMsg)\n      await chatApi.postMessage({ msg: msg.msg, topic_id })\n      textAreaRef.current?.blur()\n      onScrollBottom()\n    }\n  }\n  const handleKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.code === \"Enter\") {\n      event.preventDefault();\n      onSubmit()\n    }\n  }\n  return (\n    <div className={style.input_cnt}>\n      <XButton\n        icon={icon.chevronRightBlack}\n        className={!isInScreen ? `${style.scroll_btn} ${style.scroll_btn_act}` : style.scroll_btn}\n        onClick={onScrollBottom}\n      />\n      <div className={style.ip_ctl}>\n        <XButton\n          className={style.ip_ctl_btn}\n          iconSize={24}\n          icon={icon.plus}\n        />\n        <XButton\n          className={style.ip_ctl_btn}\n          iconSize={16}\n          icon={icon.imageWhite}\n        />\n      </div>\n      <div className={style.text_area_cnt}>\n        <textarea\n          ref={textAreaRef}\n          onChange={(e) => setMsg({ ...msg, msg: e.target.value })}\n          value={msg.msg}\n          placeholder=\"Aa\"\n          rows={1}\n          className={style.text_area}\n          onKeyDown={handleKeyDown}\n          onFocus={() => onEmitTyping(true)}\n          onBlur={() => onEmitTyping(false)}\n        />\n        <XButton\n          className={style.btn_send}\n          icon={msg.msg.length > 0 ? icon.sendWhite : icon.thumbUpWhite}\n          iconSize={16}\n          onClick={onSubmit}\n        />\n      </div>\n    </div>\n  )\n}\nexport const Loader = () => {\n  return <div className={style.load}>Đang tải...<CircularProgress size={14} /></div>\n}\nconst Typing = () => {\n  return (\n    <div className={style.chatBubble}>\n      <div className={style.typing}>\n        <div className={style.dot} />\n        <div className={style.dot} />\n        <div className={style.dot} />\n      </div>\n    </div>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"message_container__AxLpV\",\"left\":\"message_left__k4A+R\",\"left_head\":\"message_left_head__T--mk\",\"left_head_top\":\"message_left_head_top__TNK6L\",\"left_head_txt\":\"message_left_head_txt__MsKN9\",\"left_head_bot\":\"message_left_head_bot__gwXBX\",\"left_body\":\"message_left_body__xLWq0\",\"topic\":\"message_topic__bGPa4\",\"topic_left_img\":\"message_topic_left_img__s85aR\",\"topic_left_online\":\"message_topic_left_online__7lGks\",\"topic_right\":\"message_topic_right__B9HX4\",\"topic_name\":\"message_topic_name__VZ3tS\",\"topic_message\":\"message_topic_message__Cxfkf\",\"right\":\"message_right__T+jke\",\"left_ch\":\"message_left_ch__pIzTj\",\"right_ch\":\"message_right_ch__Yr32q\"};","import { useAuth, useSwrInfinite } from \"hooks\";\nimport { ITopic } from \"interface\";\nimport { paramsTopic } from \"params-query\";\nimport { useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport { Loader, Right } from \"./components\"\nimport style from \"./message.module.css\"\nimport icon from \"constants/icon\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { formatDateFromNow, onErrorAvatar, unique } from \"utils\";\nimport AuthRoute from \"route/AuthRoute\";\n\nfunction Messenger() {\n  const { USER } = useAuth()\n  const [query,] = useState(paramsTopic)\n  const location = useLocation()\n  const topic_id = location.pathname.split(\"/\")[2]\n  const { resData, onLoadMore, totalItem } = useSwrInfinite({\n    API_URL: \"topics\",\n    enable: USER,\n    params: query,\n    dedupingInterval: 0\n  })\n  const more = () => { if (resData.length < totalItem) { onLoadMore() } }\n  return (\n    <div className={style.container}>\n      <div className={topic_id ? `${style.left} ${style.left_ch}` : style.left}>\n        <div className={style.left_head}>\n          <div className={style.left_head_top}>\n            <span className={style.left_head_txt}>Chat</span>\n            <div className={style.left_head_ctl}></div>\n          </div>\n          <div className={style.left_head_bot}>\n            <img src={icon.searchGray} alt=\"\" />\n            <input type=\"text\" placeholder=\"Tìm kiếm trong tin nhắn...\" />\n          </div>\n        </div>\n        <div className={style.left_body}>\n          <InfiniteScroll\n            hasMore={true}\n            height={`calc(100vh - 172px)`}\n            dataLength={resData.length}\n            loader={resData.length < totalItem && <Loader />}\n            next={more}\n          >\n            <ul className={style.topic_list}>\n              {\n                resData.map((item: ITopic) => (\n                  <li key={item._id} className={style.topic_cnt}>\n                    <Topic item={item} />\n                  </li>\n                ))\n              }\n            </ul>\n          </InfiniteScroll>\n        </div>\n      </div>\n      <Switch>\n        <AuthRoute>\n          <Route path=\"/messages/:_id\">\n            <div\n              style={{ backgroundColor: 'var(--white)' }}\n              className={topic_id ? `${style.right} ${style.right_ch}` : style.right}\n            >\n              <Right />\n            </div>\n          </Route>\n        </AuthRoute>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Messenger;\n\nconst Topic = ({ item }: { item: ITopic }) => {\n  const location = useLocation()\n  let name = item.name\n  if (item.name?.trim().length === 0 || !item.name) {\n    name = unique(item.topic_user?.map(i => i.user?.fullname).filter(Boolean)).join(\", \")\n  }\n  const topic_id = location.pathname.split(\"/\")[2]\n  return (\n    <Link\n      style={item._id === topic_id ? { backgroundColor: 'var(--bg-color)' } : {}}\n      to={{ pathname: `/messages/${item._id}`, state: item }}\n      className={style.topic}\n    >\n      <div className={style.topic_left}>\n        <div className={style.topic_left_img}>\n          <img src={item.topic_user[0]?.user?.avatar || ''} onError={onErrorAvatar} alt=\"\" />\n          <span className={style.topic_left_online}></span>\n        </div>\n      </div>\n      <div className={style.topic_right}>\n        <span className={style.topic_name}>\n          {name}\n        </span>\n        <div className={style.topic_message}>\n          <span>{item.messages[0]?.msg}</span>\n          <span>{formatDateFromNow(item.updated_at)}</span>\n        </div>\n      </div>\n    </Link>\n  )\n}"],"names":["Right","_topic$organization_i","_topic$topic_user$map","_topic$topic_user","_topic$name","echo","useContext","AppContext","USER","user","useAuth","location","useLocation","history","useHistory","topic_id","pathname","split","topic","state","botRef","useRef","onScrollBottom","current","scrollIntoView","behavior","response","org","useSwr","API_URL","API_ROUTE","organization_id","enable","dedupingInterval","CACHE_TIME","users_name","unique","topic_user","map","i","_i$user","fullname","name","trim","length","join","resData","onLoadMore","totalItem","useSwrInfinite","keyPage","params","l","sort","isInScreen","useElementOnScreen","rootMargin","threshold","msges","setMsges","useState","isTyping","setIsTyping","useEffect","chat","subdomain","subscribed","whisper","id","avatar","current_platform","socketId","listenForWhisper","u","_u$user","listen","user_id","prev","indexOf","_jsxs","className","style","children","_jsx","XButton","onClick","goBack","icon","src","alt","ref","InfiniteScroll","dataLength","next","more","display","flexDirection","inverse","hasMore","loader","Loader","scrollableTarget","Typing","uniqueArr","concat","item","index","Message","change","InputChat","_ref","_item$user","_item$user2","_Fragment","onError","onErrorAvatar","formatDateFromNow","created_at","backgroundColor","borderRadius","dangerouslySetInnerHTML","__html","linkify","msg","initMsg","_id","reply_id","updated_at","_ref2","setMsg","textAreaRef","onEmitTyping","resizeTextArea","height","scrollHeight","onSubmit","async","_textAreaRef$current","moment","format","milliseconds","chatApi","blur","iconSize","onChange","e","target","value","placeholder","rows","onKeyDown","event","code","preventDefault","onFocus","onBlur","CircularProgress","size","query","paramsTopic","type","Topic","Switch","AuthRoute","Route","path","_item$name","_item$topic_user$","_item$topic_user$$use","_item$messages$","_item$topic_user","filter","Boolean","Link","to","messages"],"sourceRoot":""}