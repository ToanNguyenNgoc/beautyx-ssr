{"version":3,"file":"static/js/398.5656f01f.chunk.js","mappings":"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","sources":["webpack://web-booking/./src/pages/OtpMbPage/otp.module.css?5ee7","pages/OtpMbPage/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"body\":\"otp_body__UBHW1\",\"form_btn\":\"otp_form_btn__83+hr\",\"btn_send_telephone\":\"otp_btn_send_telephone__U+EHG\",\"container_title\":\"otp_container_title__-vf4-\"};","import React, { useContext, useState } from 'react';\nimport HeadMobile from 'features/HeadMobile';\nimport { authentication, signInWithPhoneNumber, RecaptchaVerifier } from \"../../firebase\";\nimport * as Yup from 'yup';\nimport style from './otp.module.css'\nimport { useFormik } from 'formik';\nimport { Input, XButton } from 'components/Layout';\nimport { AppContext } from 'context/AppProvider';\nimport { useNoti } from \"hooks\"\nimport { PopupNotification } from 'components/Notification';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IStore from 'interface/IStore';\nimport { auth } from 'api/authApi'\nimport { putUser } from 'redux/profile/userSlice';\nimport { AxiosError } from 'axios';\nimport { useHistory } from 'react-router-dom';\n\ndeclare global {\n    interface Window {\n        recaptchaVerifier: any;\n        confirmationResult: any;\n        recaptchaWidgetId: any;\n    }\n}\nwindow.confirmationResult = window.confirmationResult || {};\n\ninterface IData {\n    telephone: string,\n    code: string,\n    verification_id: string\n}\n\nfunction OtpMbPage() {\n    const [step, setStep] = useState(1)\n    const [data, setData] = useState({\n        telephone: '',\n        code: '',\n        verification_id: ''\n    })\n\n    return (\n        <>\n            <div className={style.body}>\n                {step === 1 && <FormTelephone\n                    data={data}\n                    setData={setData}\n                    step={step} setStep={setStep}\n                />}\n                {\n                    step === 2 &&\n                    <FormOtp\n                        data={data} setData={setData}\n                        step={step} setStep={setStep}\n                    />\n                }\n            </div>\n        </>\n    );\n}\n\nexport default OtpMbPage;\n\ninterface FormTelephoneProps {\n    data: IData,\n    setData: (data: IData) => void,\n    step: number, setStep: (step: number) => void\n}\n\nconst FormTelephone = (props: FormTelephoneProps) => {\n    const { data, setData, setStep } = props\n    const { t } = useContext(AppContext) as any\n    const { noti, firstLoad, resultLoad, onCloseNoti } = useNoti()\n    const generateRecaptcha = async () => {\n        try {\n            if (!window.recaptchaVerifier) {\n                window.recaptchaVerifier = new RecaptchaVerifier(\n                    'recaptcha-container',\n                    {\n                        size: 'invisible',\n                        callback: (value: any) => {\n                            // handleSubmit(value, true)\n                        },\n                        'expired-callback': () => {\n                            // Response expired. Ask user to solve reCAPTCHA again.\n                            // ...\n                        },\n                    },\n                    authentication\n                )\n            } else {\n                window.recaptchaVerifier.render();\n            }\n        } catch (err: any) {\n            console.log(err)\n        }\n    }\n    //handle form telephone\n    const handleSubmitTelephone = async (values: any) => {\n        firstLoad()\n        let phoneNumberVN = \"+84\" + values.telephone.toString().slice(1);\n        try {\n            const res = await signInWithPhoneNumber(authentication, phoneNumberVN, window.recaptchaVerifier)\n            setData({\n                ...data,\n                telephone: values.telephone,\n                verification_id: res.verificationId\n            })\n            resultLoad('')\n            setStep(2)\n        } catch (error) {\n            console.log(error);\n            let errorCode = error.code;\n            let messCode = error.message;\n            if (\n                errorCode === \"auth/quota-exceeded\" ||\n                errorCode === \"auth/too-many-requests\"\n            ) {\n                resultLoad('Số điện thoại đã đạt giới hạn cho phép gửi mã xác thực (OTP) trong ngày')\n            } else if (\n                messCode ===\n                \"reCAPTCHA has already been rendered in this element\"\n            ) {\n                resultLoad('Quá số lần nhận Otp tải lại trang để tiếp tục ...')\n            }\n            else {\n                resultLoad('Quá số lần nhận Otp tải lại trang để tiếp tục ..')\n            }\n        }\n    }\n    const formik = useFormik({\n        initialValues: {\n            telephone: data.telephone\n        },\n        validationSchema: Yup.object({\n            telephone: Yup.string()\n                .required(t(\"form.please_enter_your_phone\")),\n        }),\n        onSubmit: (values) => {\n            generateRecaptcha()\n            handleSubmitTelephone(values)\n        }\n    })\n    return (\n        <>\n            <HeadMobile\n                title='Cập nhật thông tin'\n            />\n            <div className={style.container}>\n                <div id=\"recaptcha-container\" ></div>\n                <form\n                    className={style.form_cnt}\n                    autoComplete=\"off\"\n                    onSubmit={formik.handleSubmit}\n                >\n                    <Input\n                        onChange={formik.handleChange}\n                        name=\"telephone\"\n                        value={formik.values.telephone}\n                        placeholder={t(\"pm.phone_number\")}\n                    />\n                    {\n                        formik.errors.telephone && formik.touched.telephone &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formik.errors.telephone}\n                        </span>\n                    }\n                    <div className={style.form_btn}>\n                        <XButton\n                            className={style.btn_send_telephone}\n                            title='Gửi mã xác nhận'\n                            type=\"submit\"\n                            loading={noti.load}\n                        />\n                    </div>\n                </form>\n                <PopupNotification\n                    open={noti.openAlert}\n                    setOpen={onCloseNoti}\n                    title='Thông báo'\n                    content={noti.message}\n                    children={\n                        <XButton\n                            title='Đã hiểu'\n                            onClick={onCloseNoti}\n                        />\n                    }\n                />\n            </div>\n        </>\n    )\n}\n\ninterface FormOtpProps {\n    data: IData, setData: (data: IData) => void,\n    step: number, setStep: (step: number) => void\n}\n\nconst FormOtp = (props: FormOtpProps) => {\n    const history = useHistory()\n    const dispatch = useDispatch();\n    const { data } = props;\n    const { noti, firstLoad, resultLoad, onCloseNoti } = useNoti()\n    const { USER } = useSelector((state: IStore) => state.USER)\n    const handleSubmit = async (values: any) => {\n        const params = {\n            ...data,\n            code: values.code\n        }\n        firstLoad()\n        try {\n            const res = await auth.putUserProfile(params)\n            if (res) {\n                dispatch(putUser({ ...USER, telephone: data.telephone }));\n                resultLoad(\n                    'Thay đổi thông tin thành công',\n                    <XButton\n                        title='Trở lại giỏ hàng'\n                        onClick={() => history.goBack()}\n                    />\n                )\n            }\n        } catch (error) {\n            const err = error as AxiosError;\n            switch (err.response?.status) {\n                case 301:\n                    return resultLoad('Số điện thoại đã tồn tại');\n                case 502:\n                    return resultLoad('Lỗi hệ thống gửi sms quý khách vui lòng thử lại sau!')\n                default:\n                    return resultLoad('Đã có lỗi xảy ra vui lòng thử lại sau!')\n            }\n        }\n\n    }\n    const formik = useFormik({\n        initialValues: { code: '' },\n        validationSchema: Yup.object({\n            code: Yup.string()\n                .required('Vui lòng nhập mã OTP'),\n        }),\n        onSubmit: (values) => {\n            handleSubmit(values)\n        }\n    })\n    return (\n        <>\n            <HeadMobile\n                title='Nhập mã OTP'\n                onBack={() => window.location.reload()}\n            />\n            <div className={style.container}>\n                <div className={style.container_title}>\n                    Mã OTP đã được gửi đến số điện thoại <h4>{data.telephone}</h4>\n                </div>\n                <form\n                    className={style.form_cnt}\n                    autoComplete=\"off\"\n                    onSubmit={formik.handleSubmit}\n                >\n                    <Input\n                        onChange={formik.handleChange}\n                        name=\"code\"\n                        value={formik.values.code}\n                        placeholder={'Nhập mã OTP'}\n                    />\n                    {\n                        formik.errors.code && formik.touched.code &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formik.errors.code}\n                        </span>\n                    }\n                    <div className={style.form_btn}>\n                        <XButton\n                            className={style.btn_send_telephone}\n                            title='Cập nhật'\n                            type=\"submit\"\n                        />\n                    </div>\n                </form>\n                <PopupNotification\n                    title='Thông báo'\n                    content={noti.message}\n                    open={noti.openAlert}\n                    setOpen={onCloseNoti}\n                    children={noti.element}\n                />\n            </div>\n        </>\n    )\n}"],"names":["window","confirmationResult","step","setStep","useState","data","setData","telephone","code","verification_id","_jsx","_Fragment","children","_jsxs","className","style","FormTelephone","FormOtp","props","t","useContext","AppContext","noti","firstLoad","resultLoad","onCloseNoti","useNoti","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","values","async","recaptchaVerifier","render","RecaptchaVerifier","size","callback","value","expired-callback","authentication","err","console","log","generateRecaptcha","phoneNumberVN","toString","slice","res","signInWithPhoneNumber","verificationId","error","errorCode","messCode","message","handleSubmitTelephone","HeadMobile","title","id","autoComplete","handleSubmit","Input","onChange","handleChange","name","placeholder","errors","touched","XButton","type","loading","load","PopupNotification","open","openAlert","setOpen","content","onClick","history","useHistory","dispatch","useDispatch","USER","useSelector","state","params","auth","putUser","goBack","_err$response","response","status","onBack","location","reload","element"],"sourceRoot":""}